# /cursor/docs/tdd-quality-guidelines.yaml
# 공용 규칙 문서: GREEN + REFACTOR 단계 공통 품질 기준
# ======================================================

meta:
  name: 'tdd-quality-guidelines'
  version: '1.0.0'
  applicable_agents: ['green-developer', 'refactor-engineer']
  purpose: >
    테스트 주도 개발(TDD) 과정에서 GREEN(개발) 및 REFACTOR(리팩터링) 단계가
    준수해야 할 품질 기준을 정의한다.
    테스트 통과를 위한 최소 구현(GREEN)과 구조적 개선(REFACTOR)을 모두 지원한다.

principles:
  - '테스트 통과를 위한 최소 코드만 작성하되, 의미적 일관성을 유지한다.'
  - '불필요한 복잡성을 피하고, 명확하고 타입 안전한 코드를 작성한다.'
  - 'Story, 테스트, 코드 간 도메인 언어 일치를 유지한다.'
  - '다음 리팩터링 단계를 고려하여 책임이 명확한 코드를 작성한다.'

# ======================================================
# 🧩 1. 일관성 규칙 (Consistency Rule)
# ======================================================
consistency:
  description: '동일한 도메인(feature) 내 함수 네이밍 및 구조 일관성을 유지한다.'
  rules:
    - '동일 feature 내 기존 함수명 접두사/패턴(generate, calculate 등)을 재사용한다.'
    - '입출력 타입 구조(Array, Object, Promise 등)는 기존 코드와 통일한다.'
    - '도메인 명칭(schedule, instance, event 등)은 혼용하지 않는다.'
  agent_actions:
    - '기존 src/features/[feature-name]/*.ts 파일을 스캔해 네이밍 패턴을 식별한다.'
    - '새 함수 생성 시 동일한 접두사(prefix) 또는 동사형 패턴을 따른다.'
    - '반환 타입과 동작 구조를 기존 코드와 일관되게 맞춘다.'

# ======================================================
# 🧩 2. 단일 책임 원칙 (Single Responsibility Rule)
# ======================================================
single_responsibility:
  description: '하나의 함수는 하나의 테스트(expect) 동작만 만족해야 한다.'
  rules:
    - '테스트 expect 단위로 함수 책임을 구분한다.'
    - '하나의 함수가 여러 역할(계산 + 저장)을 하지 않도록 한다.'
    - '하나의 함수에서 여러 테스트 케이스를 동시에 만족시키지 않는다.'
  agent_actions:
    - '테스트 파일 내 expect 개수를 파악한다.'
    - '하나의 expect 실패 기준으로만 코드 수정한다.'
    - '여러 기능을 처리하는 로직은 리팩터 단계에서 분리한다.'

# ======================================================
# 🧩 3. 명확한 타입 규칙 (Explicit Typing Rule)
# ======================================================
explicit_typing:
  description: '모든 함수 입력/출력에 타입을 명시하여 의도를 드러낸다.'
  rules:
    - '함수 인자, 반환값, 내부 객체 모두 TypeScript 타입을 선언한다.'
    - '테스트에 등장한 데이터 구조를 기반으로 타입을 유추한다.'
    - '명확하지 않은 타입은 unknown 대신 interface로 정의한다.'
  agent_actions:
    - '테스트 내 사용된 데이터 구조를 기반으로 interface를 생성한다.'
    - '함수 시그니처에 타입을 추가한다.'
    - '타입 추론이 불가능할 경우 테스트 데이터를 분석하여 구조를 유도한다.'

# ======================================================
# 🧩 4. 불필요한 복잡성 금지 (No Unnecessary Complexity Rule)
# ======================================================
no_complexity:
  description: '테스트 요구를 초과하는 분기, 루프, 예외 처리를 작성하지 않는다.'
  rules:
    - '테스트에 등장하지 않는 if/else, for, switch 문 금지.'
    - 'try/catch 및 방어 코드 금지.'
    - '필요한 경우 하드코딩된 리턴값 허용.'
  agent_actions:
    - '테스트 입력 케이스를 기준으로 필요한 최소 조건만 구현한다.'
    - '테스트에서 다루지 않은 분기는 작성하지 않는다.'
    - '리팩터 단계에서만 알고리즘 최적화를 고려한다.'

# ======================================================
# 🧩 5. 도메인 용어 정합성 (Domain Alignment Rule)
# ======================================================
domain_alignment:
  description: '테스트 명세와 코드의 도메인 용어를 일치시킨다.'
  rules:
    - '테스트 내 describe/it 블록의 문장 구조를 파싱하여 핵심 키워드를 추출한다.'
    - '함수명, 변수명, 주석에서 동일한 도메인 용어를 사용한다.'
    - '불일치 발생 시 경고 로그 출력.'
  agent_actions:
    - "테스트 문장에서 도메인 키워드 추출: 예) '반복 일정', '인스턴스 생성'"
    - '함수 및 변수명에 동일한 키워드를 반영한다.'
    - '불일치 발생 시 `⚠️ Domain mismatch` 로그를 출력한다.'

# ======================================================
# ✅ 결론
# ======================================================
summary:
  goal: >
    GREEN 단계에서는 위 규칙을 최소 구현 코드에 적용하여 테스트를 통과시키고,
    REFACTOR 단계에서는 동일 규칙을 유지하면서 코드 구조를 개선한다.
  expected_outcome: >
    - 코드 간 의미적 일관성 확보
    - 도메인 기반 네이밍 및 구조 유지
    - 타입 안전성과 테스트 가독성 향상
